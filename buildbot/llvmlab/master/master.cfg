# -*- python -*-
# ex: set syntax=python:

"""
Top level build bot configuration file.
"""

# Extend paths to allow loading zorg and config modules.
# handle either llvm_zorg or zorg to be checked out at the top level.
import os, sys
for zorg in ['zorg', 'llvm_zorg']: 
    path = os.path.join(os.environ.get('HOME'), zorg)
    if path not in sys.path:
        sys.path.append(path)
    path = os.path.join(os.environ.get('HOME'), zorg, 'buildbot')
    if path not in sys.path:
        sys.path.append(path)
    path = os.path.join(os.environ.get('HOME'), zorg, 'buildbot',
                    'llvmlab', 'master')
    if path not in sys.path:
        sys.path.append(path)

# Reload every module, so that we are more resilient to code changes
# on buildbot reconfig.
#
# There are still possible problems related to the ordering dependency
# on reloads, but this should at least help.
from zorg.buildbot.util import reloading
reloading.reload_all(only_paths = [os.environ.get('HOME'), basedir,
                                   os.path.normpath(basedir)],
                     log = True)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config
import config.schedulers
import config.slaves
import config.status

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.schedulers)
reload(config.builders)
reload(config.status)
reload(config)
import config

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.
c['db_url'] = "sqlite:///state.sqlite?serialize_access=1"

####### BUILDSLAVES

c['slaves'] = list(config.slaves.get_build_slaves())
c['slavePortnum'] = 9994

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
from buildbot import revlinks
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_projects_branches

c['change_source'] = [PBChangeSource()]
c['change_source'].append(SVNPoller(
    svnurl="http://10.1.1.2/svn/llvm-project/",
    split_file=split_file_projects_branches,
    pollinterval=2*60))
c['revlink'] = revlinks.RevlinkMatch([r'http://10.1.1.2/svn/llvm-project.*'],
                                      r'http://llvm.org/viewvc/llvm-project?view=rev&revision=%s')

####### BUILDERS

slaves_name = [s.slavename for s in c['slaves']]
c['builders'] = builders = list(config.builders.get_builders() )

####### STATUS TARGETS

# Schedule builds and email for all non-experimental builders.
standard_builders = [b['name'] for b in builders
                     if not b['category'].endswith('.exp')]
c['status'] = config.status.get_status_targets(standard_builders)

####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 4000

# Number of logs to maintain per builder.
c['logHorizon'] = 600

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 500

####### SCHEDULERS

c['schedulers'] = schedulers = list(config.schedulers.get_schedulers())

####### PROJECT IDENTITY

c['projectName'] = "lab.llvm.org"
c['projectURL'] = "http://lab.llvm.org/"
c['buildbotURL'] = "http://lab.llvm.org:8013/"

#c['prioritizeBuilders'] = config.builders.prioritizeBuilders
