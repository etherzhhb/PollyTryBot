# -*- python -*-
# ex: set syntax=python:

# Extend paths to allow loading zorg and config modules.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'zorg', 'buildbot', 'osuosl', 'master')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'zorg')
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.builders)
reload(config.status)
reload(config)

####### BUILDSLAVES

c['slaves'] = config.slaves.get_build_slaves()
c['slavePortnum'] = 9990

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
from zorg.buildbot.changes.llvmpoller import LLVMPoller

c['change_source'] = [PBChangeSource()]

c['change_source'].append(LLVMPoller(projects=[
    "llvm",
    "cfe",
    "clang-tests-external",
    "clang-tools-extra",
    "polly",
    "compiler-rt",
    "libcxx",
    "libcxxabi",
    "lld",
    "lldb",
    "openmp"]))

#  c['change_source'].append(LLVMPoller("test-suite", "trunk"))

####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 200

# Number of logs to maintain per builder.
c['logHorizon'] = 50

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 200

# Do not compress logs to reduce server load.
# We have a designated build master with large enough HDD.
c['logCompressionLimit'] = False

####### BUILDERS

c['builders'] = builders = list(config.builders.get_builders())

####### STATUS TARGETS

# Schedule builds and email for all non-experimental builders.
standard_builders = [b['name'] for b in builders
                     if not b['category'].endswith('.exp')]
c['status'] = config.status.get_status_targets(standard_builders)

####### SCHEDULERS

from buildbot.scheduler import Scheduler
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.basic import SingleBranchScheduler

def depends_on(projects):
    """
    Returns a ChangeFilter for the given projects.
    """
    return ChangeFilter(project=projects)

def get_all_for(category):
    """
    Returns a list of builder names for the given category.
    """
    return [
        b['name'] for b in builders
                  if b['category'] == category]


c['schedulers'] = [SingleBranchScheduler(name="llvm_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("llvm"),
                            change_filter=depends_on(
                                "llvm"))]

c['schedulers'].append(SingleBranchScheduler(name="clang_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("clang"),
                            change_filter=depends_on([
                                "llvm",
                                "cfe",
                                "clang-tools-extra"])))

c['schedulers'].append(SingleBranchScheduler(name="clang_fast_scheduler",
                            treeStableTimer=10,
                            builderNames=get_all_for("clang_fast"),
                            change_filter=depends_on([
                                "llvm",
                                "cfe",
                                "compiler-rt",
                                "lld",
                                "clang-tools-extra"])))

c['schedulers'].append(SingleBranchScheduler(name="polly_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("polly"),
                            change_filter=depends_on([
                                "cfe",
                                "llvm",
                                "polly"])))

c['schedulers'].append(SingleBranchScheduler(name="lld_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("lld"),
                            change_filter=depends_on([
                                "llvm",
                                "lld"])))

c['schedulers'].append(SingleBranchScheduler(name="lldb_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("lldb"),
                            change_filter=depends_on([
                                "llvm",
                                "cfe",
                                "lldb"])))

c['schedulers'].append(SingleBranchScheduler(name="sanitizer_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("sanitizer"),
                            change_filter=depends_on([
                                "llvm",
                                "cfe",
                                "compiler-rt"])))

c['schedulers'].append(SingleBranchScheduler(name="openmp_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("openmp"),
                            change_filter=depends_on([
                                "openmp"])))

c['schedulers'].append(SingleBranchScheduler(name="libcxx_scheduler",
                            treeStableTimer=2*60,
                            builderNames=get_all_for("libcxx"),
                            change_filter=depends_on([
                                "libcxx",
                                "libcxxabi"])))

####### PROJECT IDENTITY

c['title'] = "LLVM"
c['titleURL'] = "http://llvm.org/"
c['buildbotURL'] = "http://lab.llvm.org:8011/"

####### DB URL

c['db_url'] = "postgresql://localhost/buildmasterdb"
